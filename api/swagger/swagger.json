{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "OpenStorage is a clustered implementation of the Open Storage specification and relies on the OCI runtime.\nIt allows you to run stateful services in containers in a multi-host clustered environment.\nThis document represents the API documentaton of Openstorage, for the GO client please visit:\nhttps://github.com/libopenstorage/openstorage",
    "title": "OSD API.",
    "contact": {
      "url": "https://github.com/libopenstorage/openstorage"
    },
    "license": {
      "name": "APACHE2",
      "url": "https://opensource.org/licenses/Apache-2.0"
    },
    "version": "2.0.0"
  },
  "host": "localhost",
  "basePath": "/v1",
  "paths": {
    "/cluster/alerts/{resource}": {
      "get": {
        "description": "This will return a list of alerts for the requested resource",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "enumerateAlerts",
        "parameters": [
          {
            "type": "integer",
            "description": "Resourcetype to get alerts with.\n0: All\n1: Volume\n2: Node\n3: Cluster\n4: Drive\n",
            "name": "resource",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts object",
            "schema": {
              "$ref": "#/definitions/Alerts"
            }
          }
        }
      }
    },
    "/cluster/alerts/{resource}/{id}": {
      "delete": {
        "description": "This delete clear alert {id} with resourcetype {resource}",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "deleteAlert",
        "parameters": [
          {
            "type": "integer",
            "description": "resourcetype to get alerts with.\n0: All\n1: Volume\n2: Node\n3: Cluster\n4: Drive\n",
            "name": "resource",
            "in": "path",
            "required": true
          },
          {
            "type": "integer",
            "description": "id to get alerts with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts object",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/enumerate": {
      "get": {
        "description": "This will return the entire cluster object and it's nodes.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "summary": "Lists cluster Nodes.",
        "operationId": "enumerateCluster",
        "responses": {
          "200": {
            "description": "current cluster state",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Cluster"
              }
            }
          }
        }
      }
    },
    "/cluster/getnodeidfromip/{idip}": {
      "get": {
        "description": "this will return the node ID for the given node IP",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "GetNodeIdFromIp",
        "parameters": [
          {
            "type": "string",
            "description": "cluster node ip or id",
            "name": "idip",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "cluster node ID",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/inspect/{id}": {
      "get": {
        "description": "This will return the requested node object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "summary": "Inspect cluster Nodes.",
        "operationId": "inspectNode",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "a node",
            "schema": {
              "$ref": "#/definitions/Node"
            }
          }
        }
      }
    },
    "/cluster/nodehealth": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "This will return node health.",
        "operationId": "nodeHealth",
        "responses": {
          "200": {
            "description": "node health of responding node.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/nodestatus": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "summary": "This will return the node status .",
        "operationId": "nodeStatus",
        "responses": {
          "200": {
            "description": "node status of responding node.",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/objectstore": {
      "get": {
        "description": "This will list current objectstores",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Lists Objectstore",
        "operationId": "objectStoreInspect",
        "parameters": [
          {
            "type": "string",
            "description": "ID of objectstore to inspect",
            "name": "ID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ObjectstoreInfo"
            }
          }
        }
      },
      "put": {
        "description": "This will enable/disable object store functionality.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Updates object store",
        "operationId": "objectStoreUpdate",
        "parameters": [
          {
            "type": "boolean",
            "description": "enable/disable flag for object store",
            "name": "enable",
            "in": "query"
          },
          {
            "type": "string",
            "description": "ID of objectstore to update",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      },
      "post": {
        "description": "This creates the volumes required to run the object store",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Create an Object store",
        "operationId": "objectStoreCreate",
        "parameters": [
          {
            "type": "string",
            "description": "volume on which object store to run",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/ObjectstoreInfo"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete object store on node",
        "produces": [
          "application/json"
        ],
        "tags": [
          "objectstore"
        ],
        "summary": "Delete object store",
        "operationId": "objectStoreDelete",
        "parameters": [
          {
            "type": "string",
            "description": "ID of objectstore to delete",
            "name": "id",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/peerstatus": {
      "get": {
        "description": "This will return the peer node status",
        "produces": [
          "application/json"
        ],
        "tags": [
          "node"
        ],
        "operationId": "peerStatus",
        "parameters": [
          {
            "type": "integer",
            "description": "id of the node we want to check.",
            "name": "name",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "node status of requested node",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/schedpolicy": {
      "get": {
        "description": "This will list all of schedule policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "List schedule policies",
        "operationId": "schedPolicyEnumerate",
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/SchedPolicy"
              }
            }
          }
        }
      },
      "put": {
        "description": "This will update specified schedule policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Update schedule policy",
        "operationId": "schedPolicyUpdate",
        "parameters": [
          {
            "description": "policy name and schedule to update",
            "name": "schedpolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchedPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      },
      "post": {
        "description": "This creates scheudle policy which will allow user to create snapshot schedule",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Create schedule policy",
        "operationId": "schedPolicyCreate",
        "parameters": [
          {
            "description": "policy name and schedule to create",
            "name": "schedpolicy",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SchedPolicy"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/schedpolicy/{name}": {
      "get": {
        "description": "This will return the requested schedule policy details",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Get policy details",
        "operationId": "schedPolicyGet",
        "parameters": [
          {
            "type": "string",
            "description": "Retrive details of given policy name",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "$ref": "#/definitions/SchedPolicy"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete specified schedule policy",
        "produces": [
          "application/json"
        ],
        "tags": [
          "schedpolicy"
        ],
        "summary": "Delete schedule policy",
        "operationId": "shedPolicyDelete",
        "parameters": [
          {
            "type": "string",
            "description": "policy name and schedule to delete",
            "name": "name",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/": {
      "get": {
        "description": "This will return the value/data for given secret key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Get the seceret value/data for given key",
        "operationId": "getSecret",
        "parameters": [
          {
            "type": "string",
            "description": "secret id/key whose value to be retrived",
            "name": "id",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "returns the value/data for given key",
            "schema": {
              "$ref": "#/definitions/GetSecretResponse"
            }
          }
        }
      },
      "put": {
        "description": "This will set secrets data/value against given key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Set Secret Value",
        "operationId": "setSeceret",
        "parameters": [
          {
            "type": "string",
            "description": "key/id for secrets",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "description": "value/data for secrets",
            "name": "secretvalue",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SetSecretRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/defaultsecretkey": {
      "get": {
        "description": "This will return the cluster wide secret key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Get cluster secret key",
        "operationId": "getDefaultSecretKey",
        "responses": {
          "200": {
            "description": "returns cluster wide secret key",
            "schema": {
              "$ref": "#/definitions/GetSecretResponse"
            }
          }
        }
      },
      "put": {
        "description": "This will set the cluster wide default secret key",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Set cluster secret key",
        "operationId": "setDefaultSecretKey",
        "parameters": [
          {
            "description": "default secret key",
            "name": "defaultkey",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DefaultSecretKeyRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/login": {
      "post": {
        "description": "This will initiate session with secret store",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Start session with secret store",
        "operationId": "secretsLogin",
        "parameters": [
          {
            "description": "config for login to secret store",
            "name": "SecretLoginConfig",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/cluster/secrets/verify": {
      "get": {
        "description": "This will return error if session is not estabilished with secrets store",
        "produces": [
          "application/json"
        ],
        "tags": [
          "secrets"
        ],
        "summary": "Validates session with secret store",
        "operationId": "secretLoginCheck",
        "responses": {
          "200": {
            "description": "validates session with secret store"
          }
        }
      }
    },
    "/cluster/status": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "summary": "this will return the cluster status.",
        "operationId": "status",
        "responses": {
          "200": {
            "description": "cluster status",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/cluster/versions": {
      "get": {
        "description": "Lists API Versions supported by this cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "enumerateVersions",
        "responses": {
          "200": {
            "description": "Supported versions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/cluster/{id}": {
      "put": {
        "description": "This will shutdown a node (Not Implemented)",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "shutdownNode",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "shutdown success",
            "schema": {
              "type": "string"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete a node from the cluster",
        "produces": [
          "application/json"
        ],
        "tags": [
          "cluster"
        ],
        "operationId": "deleteNode",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "description": "forceRemove node",
            "name": "forceRemove",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "delete node success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/config/cluster": {
      "get": {
        "description": "This will return the requested cluster configuration object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Get cluster configuration.",
        "operationId": "getClusterConfig",
        "responses": {
          "200": {
            "description": "a cluster config",
            "schema": {
              "$ref": "#/definitions/ClusterConfig"
            }
          }
        }
      },
      "post": {
        "description": "This will set the requested cluster configuration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Set cluster configuration.",
        "operationId": "setClusterConfig",
        "parameters": [
          {
            "description": "cluster config json",
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ClusterConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/config/enumerate": {
      "get": {
        "description": "This will return the node configuration for all nodes",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Get configuration for all nodes.",
        "operationId": "enumerate",
        "responses": {
          "200": {
            "description": "node config enumeration",
            "schema": {
              "$ref": "#/definitions/NodesConfig"
            }
          }
        }
      }
    },
    "/config/node": {
      "post": {
        "description": "This will set the requested node configuration",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Set node configuration.",
        "operationId": "setNodeConfig",
        "parameters": [
          {
            "description": "node config json",
            "name": "config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NodeConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/config/node/{id}": {
      "get": {
        "description": "This will return the requested node configuration object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Get node configuration.",
        "operationId": "getNodeConfig",
        "parameters": [
          {
            "type": "string",
            "description": "id to get node with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "a node",
            "schema": {
              "$ref": "#/definitions/NodeConfig"
            }
          }
        }
      },
      "delete": {
        "description": "This will delete the requested node configuration object",
        "produces": [
          "application/json"
        ],
        "tags": [
          "config"
        ],
        "summary": "Delete node configuration.",
        "operationId": "deleteNodeConfig",
        "parameters": [
          {
            "type": "string",
            "description": "id to reference node",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "success"
          }
        }
      }
    },
    "/osd-snapshots": {
      "get": {
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "snapshot"
        ],
        "summary": "Enumerate snapshots.",
        "operationId": "enumerateSnaps",
        "parameters": [
          {
            "type": "string",
            "description": "Volume name that maps to this snap",
            "name": "name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated volume labels\nexample: {\"label1\",\"label2\"}\n",
            "name": "VolumeLabels",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Comma separated snap labels\nexample: {\"label1\",\"label2\"}\n",
            "name": "SnapLabels",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Snap UUID",
            "name": "uuid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "an array of snapshots",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Volume"
              }
            }
          }
        }
      },
      "post": {
        "description": "Take a snapshot of volume in SnapCreateRequest",
        "produces": [
          "application/json"
        ],
        "tags": [
          "snapshot"
        ],
        "operationId": "createSnap",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "query",
            "required": true
          },
          {
            "description": "spec to create snap with",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SnapCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "an array of volumes",
            "schema": {
              "$ref": "#/definitions/SnapCreateResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/SnapCreateResponse"
            }
          }
        }
      }
    },
    "/osd-snapshots/groupsnap": {
      "post": {
        "description": "Take a snapshot of volumegroup",
        "produces": [
          "application/json"
        ],
        "tags": [
          "volumegroup"
        ],
        "operationId": "snapVolumeGroup",
        "parameters": [
          {
            "description": "GroupSnap create request",
            "name": "groupspec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupSnapCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "group snap create response",
            "schema": {
              "$ref": "#/definitions/GroupSnapCreateResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/GroupSnapCreateResponse"
            }
          }
        }
      }
    },
    "/osd-snapshots/restore/{id}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "snapshot"
        ],
        "summary": "Restore snapshot with specified id.",
        "operationId": "restoreSnap",
        "parameters": [
          {
            "type": "integer",
            "description": "id of snapshot to restore",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Restored volume",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    },
    "/osd-volumes": {
      "get": {
        "description": "Enumerate all volumes",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "operationId": "enumerateVolumes",
        "parameters": [
          {
            "type": "string",
            "description": "User specified volume name (Case Sensitive)",
            "name": "Name",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Comma separated name value pairs\nexample: {\"label1\",\"label2\"}\n",
            "name": "Label",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "Comma separated name value pairs\nexample: {\"label1\",\"label2\"}\n",
            "name": "ConfigLabel",
            "in": "formData"
          },
          {
            "type": "string",
            "format": "uuid",
            "description": "Volume UUID",
            "name": "VolumeID",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "an array of volumes",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Volume"
              }
            }
          }
        }
      }
    },
    "/osd-volumes/catalog/{id}": {
      "get": {
        "description": "Path is optional and default the behaviour is a catalog on the root of the volume.",
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Catalog lists the files and folders on volume with specified id.",
        "operationId": "catalogVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "Optional path inside mount to catalog.",
            "name": "subfolder",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Folder depth we wish to return, default is all.",
            "name": "depth",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "volume catalog response",
            "schema": {
              "$ref": "#/definitions/CatalogResponse"
            }
          }
        }
      }
    },
    "/osd-volumes/quiesce/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Quiesce volume with specified id.",
        "operationId": "quiesceVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    },
    "/osd-volumes/requests/{id}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Get Requests for volume with specified id.",
        "operationId": "requestsVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/ActiveRequests"
            }
          }
        }
      }
    },
    "/osd-volumes/stats/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Get stats for volume with specified id.",
        "operationId": "statsVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/Stats"
            }
          }
        }
      }
    },
    "/osd-volumes/unquiesce/{id}": {
      "post": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Unquiesce volume with specified id.",
        "operationId": "unquiesceVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    },
    "/osd-volumes/usedsize/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Get Used size of volume with specified id.",
        "operationId": "usedSizeVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response"
          }
        }
      }
    },
    "/osd-volumes/versions": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Lists API versions supported by this volumeDriver.",
        "operationId": "listVersions",
        "responses": {
          "200": {
            "description": "Supported versions",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/osd-volumes/{id}": {
      "get": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Inspect volume with specified id.",
        "operationId": "inspectVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume get response",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          }
        }
      },
      "put": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Updates a single volume with given spec.",
        "operationId": "setVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          },
          {
            "description": "spec to set volume with",
            "name": "spec",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeSetRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeSetResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeSetResponse"
            }
          }
        }
      },
      "delete": {
        "produces": [
          "application/json"
        ],
        "tags": [
          "volume"
        ],
        "summary": "Delete volume with specified id.",
        "operationId": "deleteVolume",
        "parameters": [
          {
            "type": "integer",
            "description": "id to get volume with",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "volume set response",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          },
          "default": {
            "description": "unexpected error",
            "schema": {
              "$ref": "#/definitions/VolumeResponse"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "AWSConfig": {
      "description": "AWS configuration parameters struct",
      "type": "object",
      "properties": {
        "aws_access_key_id": {
          "type": "string",
          "x-go-name": "AccessKeyId"
        },
        "aws_cmk": {
          "type": "string",
          "x-go-name": "Cmk"
        },
        "aws_region": {
          "type": "string",
          "x-go-name": "Region"
        },
        "aws_secret_access_key": {
          "type": "string",
          "x-go-name": "SecretAccessKey"
        },
        "aws_secret_token_key": {
          "type": "string",
          "x-go-name": "SecretTokenKey"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "CapacityUsageInfo": {
      "description": "Provides details on exclusive and shared storage used by\nsnapshot/volume specifically for copy-on-write(COW) snapshots. Deletion\nof snapshots and overwirte of volume will affect the exclusive storage\nused by the other dependent snaps and parent volume.",
      "type": "object",
      "properties": {
        "exclusive_bytes": {
          "description": "Storage consumed exclusively by this single snapshot. Deletion of this\nsnapshot may increase the free storage available by this amount.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "ExclusiveBytes"
        },
        "shared_bytes": {
          "description": "Storage consumed by this snapshot that is shared with parent and children",
          "type": "integer",
          "format": "int64",
          "x-go-name": "SharedBytes"
        },
        "total_bytes": {
          "description": "TotalBytes used by this volume",
          "type": "integer",
          "format": "int64",
          "x-go-name": "TotalBytes"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CapacityUsageResponse": {
      "description": "Defines the response for CapacityUsage request",
      "type": "object",
      "properties": {
        "CapacityUsageInfo": {
          "$ref": "#/definitions/CapacityUsageInfo"
        },
        "Error": {
          "description": "Describes the err if all of the usage details could not be obtained",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupCatalogRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud",
          "type": "string"
        },
        "ID": {
          "description": "ID is Backup ID in the cloud",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupCatalogResponse": {
      "type": "object",
      "properties": {
        "Contents": {
          "description": "Contents is listing of backup contents",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is cloud credential to be used for backup",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if full backup is desired even though incremental is possible",
          "type": "boolean"
        },
        "Labels": {
          "description": "Labels are list of key value pairs to tag the cloud backup. These labels\nare stored in the metadata associated with the backup.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Name": {
          "description": "Name is optional unique id to be used for this backup\nIf not specified backup creates this by default",
          "type": "string"
        },
        "VolumeID": {
          "description": "VolumeID of the volume for which cloudbackup is requested",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupCreateResponse": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the task performing this backup",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupDeleteAllRequest": {
      "type": "object",
      "properties": {
        "All": {
          "description": "All if set to true, backups for all clusters in the cloud are processed",
          "type": "boolean"
        },
        "ClusterID": {
          "description": "ClusterID is the optional clusterID for the request",
          "type": "string"
        },
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is optional Source VolumeID for the request",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupDeleteRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "Force": {
          "description": "Force Delete cloudbackup even if there are dependencies",
          "type": "boolean"
        },
        "ID": {
          "description": "ID is the ID of the cloud backup",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupEnumerateRequest": {
      "type": "object",
      "properties": {
        "All": {
          "description": "All if set to true, backups for all clusters in the cloud are processed",
          "type": "boolean"
        },
        "ClusterID": {
          "description": "ClusterID is the optional clusterID for the request",
          "type": "string"
        },
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is optional Source VolumeID for the request",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupEnumerateResponse": {
      "type": "object",
      "properties": {
        "Backups": {
          "description": "Backups is list of backups in cloud for given volume/cluster/s",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudBackupInfo"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupGenericRequest": {
      "type": "object",
      "properties": {
        "All": {
          "description": "All if set to true, backups for all clusters in the cloud are processed",
          "type": "boolean"
        },
        "ClusterID": {
          "description": "ClusterID is the optional clusterID for the request",
          "type": "string"
        },
        "CredentialUUID": {
          "description": "CredentialUUID is the credential for cloud to be used for the request",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is optional Source VolumeID for the request",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupGroupCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is cloud credential to be used for backup",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if full backup is desired even though incremental is possible",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates backup request for a volumegroup with this group id",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates backup request for a volume group with these labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "VolumeIDs": {
          "description": "VolumeIDs are a list of volume IDs to use for the backup request\nIf multiple of GroupID, Labels or VolumeIDs are specified, volumes matching all of\nthem are backed up to cloud",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupGroupCreateResponse": {
      "type": "object",
      "properties": {
        "GroupCloudBackupID": {
          "description": "ID for this group of backups",
          "type": "string"
        },
        "Names": {
          "description": "Names of the tasks performing this group backup",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupGroupSchedCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is cloud credential to be used with this schedule",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if scheduled backups must be full always",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates the group of volumes for which cloudbackup schedule is\nbeing created",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates a volume group for which this group cloudsnap schedule is\nbeing created. If this is provided GroupId is not needed and vice-versa.",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MaxBackups": {
          "description": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "integer",
          "format": "uint64"
        },
        "Schedule": {
          "description": "Schedule is the frequency of backup",
          "type": "string"
        },
        "VolumeIDs": {
          "description": "VolumeIDs are a list of volume IDs to use for the backup request\nIf multiple of GroupID, Labels or VolumeIDs are specified, volumes matching all of\nthem are backed up to cloud",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupHistoryItem": {
      "type": "object",
      "properties": {
        "SrcVolumeID": {
          "description": "SrcVolumeID is volume ID which was backedup",
          "type": "string"
        },
        "Status": {
          "description": "Status indicates whether backup was completed/failed",
          "type": "string"
        },
        "Timestamp": {
          "description": "TimeStamp is the time at which either backup completed/failed",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupHistoryRequest": {
      "type": "object",
      "properties": {
        "SrcVolumeID": {
          "description": "SrcVolumeID is volumeID for which history of backup/restore\nis being requested",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupHistoryResponse": {
      "type": "object",
      "properties": {
        "HistoryList": {
          "description": "HistoryList is list of past backup/restores in the cluster",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CloudBackupHistoryItem"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupInfo": {
      "type": "object",
      "properties": {
        "ID": {
          "description": "ID is the ID of the cloud backup",
          "type": "string"
        },
        "Metadata": {
          "description": "Metadata associated with the backup",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is Source volumeID of the backup",
          "type": "string"
        },
        "SrcVolumeName": {
          "description": "SrcvolumeName is name of the sourceVolume of the backup",
          "type": "string"
        },
        "Status": {
          "description": "Status indicates the status of the backup",
          "type": "string"
        },
        "Timestamp": {
          "description": "Timestamp is the timestamp at which the source volume\nwas backed up to cloud",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupOpType": {
      "type": "string",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupRestoreRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the credential to be used for restore operation",
          "type": "string"
        },
        "ID": {
          "description": "ID is the backup ID being restored",
          "type": "string"
        },
        "Name": {
          "description": "Name is optional unique id to be used for this restore op\nrestore creates this by default",
          "type": "string"
        },
        "NodeID": {
          "description": "NodeID is the optional NodeID for provisioning restore\nvolume (ResoreVolumeName should not be specified)",
          "type": "string"
        },
        "RestoreVolumeName": {
          "description": "RestoreVolumeName is optional volume Name of the new volume to be created\nin the cluster for restoring the cloudbackup",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupRestoreResponse": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the task performing this restore",
          "type": "string"
        },
        "RestoreVolumeID": {
          "description": "RestoreVolumeID is the volumeID to which the backup is being restored",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedCreateRequest": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the cloud credential used with this schedule",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if scheduled backups must be full always",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates the group of volumes for this cloudbackup schedule",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates a volume group for this cloudsnap schedule",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MaxBackups": {
          "description": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "integer",
          "format": "uint64"
        },
        "Schedule": {
          "description": "Schedule is the frequence of backup",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is the schedule's source volume",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedCreateResponse": {
      "type": "object",
      "properties": {
        "UUID": {
          "description": "UUID is the UUID of the newly created schedule",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedDeleteRequest": {
      "type": "object",
      "properties": {
        "UUID": {
          "description": "UUID is UUID of the schedule to be deleted",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupSchedEnumerateResponse": {
      "type": "object",
      "properties": {
        "Schedules": {
          "description": "Schedule is map of schedule uuid to scheduleInfo",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CloudBackupScheduleInfo"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupScheduleInfo": {
      "type": "object",
      "properties": {
        "CredentialUUID": {
          "description": "CredentialUUID is the cloud credential used with this schedule",
          "type": "string"
        },
        "Full": {
          "description": "Full indicates if scheduled backups must be full always",
          "type": "boolean"
        },
        "GroupID": {
          "description": "GroupID indicates the group of volumes for this cloudbackup schedule",
          "type": "string"
        },
        "Labels": {
          "description": "Labels indicates a volume group for this cloudsnap schedule",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "MaxBackups": {
          "description": "MaxBackups are the maximum number of backups retained\nin cloud.Older backups are deleted",
          "type": "integer",
          "format": "uint64"
        },
        "Schedule": {
          "description": "Schedule is the frequence of backup",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is the schedule's source volume",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStateChangeRequest": {
      "type": "object",
      "properties": {
        "Name": {
          "description": "Name of the backup/restore task for which state change\nis being requested",
          "type": "string"
        },
        "RequestedState": {
          "description": "RequestedState is desired state of the op\ncan be pause/resume/stop",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatus": {
      "type": "object",
      "properties": {
        "BytesDone": {
          "description": "BytesDone indicates Bytes uploaded/downloaded so far",
          "type": "integer",
          "format": "uint64"
        },
        "BytesTotal": {
          "description": "BytesTotal is the total number of bytes being transferred",
          "type": "integer",
          "format": "uint64"
        },
        "CompletedTime": {
          "description": "CompletedTime indicates Op's completed time",
          "type": "string",
          "format": "date-time"
        },
        "CredentialUUID": {
          "description": "CredentialUUID used for this backup/restore op",
          "type": "string"
        },
        "EtaSeconds": {
          "description": "EtaSeconds estimated time in seconds for backup/restore completion",
          "type": "integer",
          "format": "int64"
        },
        "GroupCloudBackupID": {
          "description": "GroupCloudBackupID is valid for backups that were started as part of group\ncloudbackup request",
          "type": "string"
        },
        "ID": {
          "description": "ID is the ID for the operation",
          "type": "string"
        },
        "Info": {
          "description": "Info currently indicates only failure cause in case of failed backup/restore",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "NodeID": {
          "description": "NodeID is the ID of the node where this Op is active",
          "type": "string"
        },
        "OpType": {
          "$ref": "#/definitions/CloudBackupOpType"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID is either the volume being backed-up or target volume to\nwhich a cloud backup is being restored",
          "type": "string"
        },
        "StartTime": {
          "description": "StartTime indicates Op's start time",
          "type": "string",
          "format": "date-time"
        },
        "Status": {
          "$ref": "#/definitions/CloudBackupStatusType"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatusRequest": {
      "type": "object",
      "properties": {
        "Local": {
          "description": "Local indicates if only those backups/restores that are\nactive on current node must be returned",
          "type": "boolean"
        },
        "Name": {
          "description": "Name of the backup/restore task. If this is specified, SrcVolumeID is\nignored. This could be GroupCloudBackupId too, and in that case multiple\nstatuses belonging to the groupCloudBackupID is returned.",
          "type": "string"
        },
        "SrcVolumeID": {
          "description": "SrcVolumeID optional volumeID to list status of backup/restore",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatusResponse": {
      "type": "object",
      "properties": {
        "Statuses": {
          "description": "statuses is list of currently active/failed/done backup/restores\nmap key is the id of the task",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/CloudBackupStatus"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CloudBackupStatusType": {
      "type": "string",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Cluster": {
      "type": "object",
      "title": "Cluster represents the state of the cluster.",
      "required": [
        "Id"
      ],
      "properties": {
        "FluentDConfig": {
          "$ref": "#/definitions/FluentDConfig"
        },
        "Id": {
          "description": "Id of the cluster.",
          "type": "string"
        },
        "LoggingURL": {
          "description": "Logging url for the cluster.",
          "type": "string"
        },
        "ManagementURL": {
          "description": "Management url for the cluster",
          "type": "string"
        },
        "NodeId": {
          "description": "Id of the node on which this cluster object is initialized",
          "type": "string"
        },
        "Nodes": {
          "description": "array of all the nodes in the cluster.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Node"
          }
        },
        "Status": {
          "$ref": "#/definitions/Status"
        },
        "TunnelConfig": {
          "$ref": "#/definitions/TunnelConfig"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "ClusterConfig": {
      "description": "ClusterConfig is a cluster level config parameter struct",
      "type": "object",
      "properties": {
        "cluster_id": {
          "type": "string",
          "x-go-name": "ClusterId"
        },
        "created": {
          "type": "string",
          "format": "date-time",
          "x-go-name": "Created"
        },
        "description": {
          "type": "string",
          "x-go-name": "Description"
        },
        "domain": {
          "type": "string",
          "x-go-name": "Domain"
        },
        "kvdb": {
          "$ref": "#/definitions/KvdbConfig"
        },
        "mode": {
          "type": "string",
          "x-go-name": "Mode"
        },
        "private": {
          "type": "object",
          "x-go-name": "Private"
        },
        "secrets": {
          "$ref": "#/definitions/SecretsConfig"
        },
        "version": {
          "type": "string",
          "x-go-name": "Version"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "Config": {
      "type": "object",
      "properties": {
        "Osd": {
          "type": "object",
          "properties": {
            "ClusterConfig": {
              "$ref": "#/definitions/ClusterConfig"
            },
            "Drivers": {
              "description": "map[string]string is volume.VolumeParams equivalent",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            },
            "GraphDrivers": {
              "description": "map[string]string is volume.VolumeParams equivalent",
              "type": "object",
              "additionalProperties": {
                "type": "object",
                "additionalProperties": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/config"
    },
    "CosType": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CredCreateRequest": {
      "description": "CredCreateRequest is the input for CredCreate command",
      "type": "object",
      "properties": {
        "InputParams": {
          "description": "InputParams is map describing cloud provide",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "CredCreateResponse": {
      "description": "CredCreateResponse is returned for CredCreate command",
      "type": "object",
      "properties": {
        "UUID": {
          "description": "UUID of the credential that was just created",
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "DefaultSecretKeyRequest": {
      "description": "DefaultSecretKeyRequest specify request to set cluster secret key",
      "type": "object",
      "properties": {
        "DefaultSecretKey": {
          "type": "string"
        },
        "Override": {
          "type": "boolean"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "FluentDConfig": {
      "description": "DEPRECATED",
      "type": "object",
      "title": "FluentDConfig describes ip and port of a fluentdhost.",
      "properties": {
        "ip": {
          "type": "string",
          "x-go-name": "IP"
        },
        "port": {
          "type": "string",
          "x-go-name": "Port"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "GeoConfig": {
      "description": "GeoConfig holds geographic information",
      "type": "object",
      "properties": {
        "rack": {
          "type": "string",
          "x-go-name": "Rack"
        },
        "region": {
          "type": "string",
          "x-go-name": "Region"
        },
        "zone": {
          "type": "string",
          "x-go-name": "Zone"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "GetSecretResponse": {
      "description": "GetSecretResponse gets secret value for given key",
      "type": "object",
      "properties": {
        "SecretValue": {
          "type": "object"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "KvdbConfig": {
      "description": "KvdbConfig stores parameters defining kvdb configuration",
      "type": "object",
      "properties": {
        "acl_token": {
          "type": "string",
          "x-go-name": "AclToken"
        },
        "ca_auth_address": {
          "type": "string",
          "x-go-name": "CAAuthAddress"
        },
        "ca_file": {
          "type": "string",
          "x-go-name": "CAFile"
        },
        "cert_file": {
          "type": "string",
          "x-go-name": "CertFile"
        },
        "cert_key_file": {
          "type": "string",
          "x-go-name": "CertKeyFile"
        },
        "client_cert_auth": {
          "type": "string",
          "x-go-name": "ClientCertAuth"
        },
        "discovery": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Discovery"
        },
        "insecure_skip_verify": {
          "type": "boolean",
          "x-go-name": "InsecureSkipVerify"
        },
        "name": {
          "type": "string",
          "x-go-name": "Name"
        },
        "password": {
          "type": "string",
          "x-go-name": "Password"
        },
        "transport_scheme": {
          "type": "string",
          "x-go-name": "TransportScheme"
        },
        "trusted_ca_file": {
          "type": "string",
          "x-go-name": "TrustedCAFile"
        },
        "username": {
          "type": "string",
          "x-go-name": "Username"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "NetworkConfig": {
      "description": "NetworkConfig is a network configuration parameters struct",
      "type": "object",
      "properties": {
        "data_interface": {
          "type": "string",
          "x-go-name": "DataIface"
        },
        "mgt_interface": {
          "type": "string",
          "x-go-name": "MgtIface"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "Node": {
      "description": "It includes the current physical state (CPU, memory, storage, network usage) as\nwell as the containers running on the system.",
      "type": "object",
      "title": "Node describes the state of a node.",
      "properties": {
        "Avgload": {
          "description": "Average load (percentage)",
          "type": "integer",
          "format": "int64"
        },
        "Cpu": {
          "description": "Cpu usage of the node.",
          "type": "number",
          "format": "double"
        },
        "DataIp": {
          "description": "Data IP",
          "type": "string"
        },
        "Disks": {
          "description": "List of disks on this node.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/StorageResource"
          }
        },
        "GenNumber": {
          "description": "GenNumber of the node",
          "type": "integer",
          "format": "uint64"
        },
        "GossipPort": {
          "description": "GossipPort is the port used by the gossip protocol",
          "type": "string"
        },
        "Hostname": {
          "description": "Hostname of this node",
          "type": "string"
        },
        "Id": {
          "description": "Id of the node.",
          "type": "string"
        },
        "MemFree": {
          "description": "Free Memory of the node",
          "type": "integer",
          "format": "uint64"
        },
        "MemTotal": {
          "description": "Total Memory of the node",
          "type": "integer",
          "format": "uint64"
        },
        "MemUsed": {
          "description": "Used Memory of the node",
          "type": "integer",
          "format": "uint64"
        },
        "MgmtIp": {
          "description": "Management IP",
          "type": "string"
        },
        "NodeData": {
          "description": "Node data for this node (EX: Public IP, Provider, City..)",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "NodeLabels": {
          "description": "User defined labels for node. Key Value pairs",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Pools": {
          "description": "List of storage pools this node supports",
          "type": "array",
          "items": {
            "$ref": "#/definitions/StoragePool"
          }
        },
        "SchedulerNodeName": {
          "description": "SchedulerNodeName is name of the node in scheduler context. It can be\nempty if unable to get the name from the scheduler.",
          "type": "string"
        },
        "StartTime": {
          "description": "Start time of this node",
          "type": "string",
          "format": "date-time"
        },
        "Status": {
          "$ref": "#/definitions/Status"
        },
        "Timestamp": {
          "description": "Timestamp",
          "type": "string",
          "format": "date-time"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "NodeConfig": {
      "description": "NodeConfig is a node level config data",
      "type": "object",
      "properties": {
        "csi_endpoint": {
          "type": "string",
          "x-go-name": "CSIEndpoint"
        },
        "geo": {
          "$ref": "#/definitions/GeoConfig"
        },
        "network": {
          "$ref": "#/definitions/NetworkConfig"
        },
        "node_id": {
          "type": "string",
          "x-go-name": "NodeId"
        },
        "private": {
          "type": "object",
          "x-go-name": "Private"
        },
        "storage": {
          "$ref": "#/definitions/StorageConfig"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "NodesConfig": {
      "description": "NodesConfig contains all of node level data",
      "type": "array",
      "items": {
        "$ref": "#/definitions/NodeConfig"
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "SchedPolicy": {
      "description": "SchedPolicy specify name and schedule to create/update/list schedule policy",
      "type": "object",
      "properties": {
        "Name": {
          "type": "string"
        },
        "Schedule": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/schedpolicy"
    },
    "SecretLoginRequest": {
      "description": "SecretLoginRequest specify secret store and config to initiate\nsecret store session",
      "type": "object",
      "properties": {
        "SecretConfig": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "SecretType": {
          "type": "string"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "SecretsConfig": {
      "description": "SecretsConfig is a secrets configuration parameters struct",
      "type": "object",
      "properties": {
        "aws": {
          "$ref": "#/definitions/AWSConfig"
        },
        "cluster_secret_key": {
          "type": "string",
          "x-go-name": "ClusterSecretKey"
        },
        "secret_type": {
          "type": "string",
          "x-go-name": "SecretType"
        },
        "vault": {
          "$ref": "#/definitions/VaultConfig"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "SetSecretRequest": {
      "description": "SetSecretRequest stores the given value/data against the key",
      "type": "object",
      "properties": {
        "SecretValue": {
          "type": "object"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/secrets"
    },
    "StatPoint": {
      "description": "StatPoint represents the basic structure of a single Stat reported\nTODO: This is the first step to introduce stats in openstorage.\nFollow up task is to introduce an API for logging stats",
      "type": "object",
      "properties": {
        "Fields": {
          "description": "Fields and values of the stat",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "Name": {
          "description": "Name of the Stat",
          "type": "string"
        },
        "Tags": {
          "description": "Tags for the Stat",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "Timestamp": {
          "description": "Timestamp in Unix format",
          "type": "integer",
          "format": "int64"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Status": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StorageConfig": {
      "description": "StorageConfig is a storage configuration parameters struct",
      "type": "object",
      "properties": {
        "devices": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Devices"
        },
        "devices_md": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "DevicesMd"
        },
        "max_count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxCount"
        },
        "max_drive_set_count": {
          "type": "integer",
          "format": "uint32",
          "x-go-name": "MaxDriveSetCount"
        },
        "raid_level": {
          "type": "string",
          "x-go-name": "RaidLevel"
        },
        "raid_level_md": {
          "type": "string",
          "x-go-name": "RaidLevelMd"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    },
    "StorageMedium": {
      "type": "integer",
      "format": "int32",
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StoragePool": {
      "description": "StoragePool groups different storage devices based on their CosType",
      "type": "object",
      "properties": {
        "Cos": {
          "$ref": "#/definitions/CosType"
        },
        "ID": {
          "description": "ID pool ID",
          "type": "integer",
          "format": "int32"
        },
        "Medium": {
          "$ref": "#/definitions/StorageMedium"
        },
        "RaidLevel": {
          "description": "RaidLevel storage raid level",
          "type": "string"
        },
        "TotalSize": {
          "description": "TotalSize of the pool",
          "type": "integer",
          "format": "uint64"
        },
        "Used": {
          "description": "Used size of the pool",
          "type": "integer",
          "format": "uint64"
        },
        "labels": {
          "description": "Labels is a list of user defined name-value pairs",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Labels"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "StorageResource": {
      "type": "object",
      "title": "StorageResource groups properties of a storage device.",
      "properties": {
        "cache": {
          "description": "True if dedicated as cache",
          "type": "boolean",
          "x-go-name": "Cache"
        },
        "id": {
          "description": "Id is the LUN identifier.",
          "type": "string",
          "x-go-name": "Id"
        },
        "iops": {
          "description": "IOPS",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Iops"
        },
        "last_scan": {
          "$ref": "#/definitions/Timestamp"
        },
        "medium": {
          "$ref": "#/definitions/StorageMedium"
        },
        "metadata": {
          "description": "True if dedicated for metadata.",
          "type": "boolean",
          "x-go-name": "Metadata"
        },
        "online": {
          "description": "True if this device is online.",
          "type": "boolean",
          "x-go-name": "Online"
        },
        "path": {
          "description": "Path device path for this storage resource.",
          "type": "string",
          "x-go-name": "Path"
        },
        "randRW": {
          "description": "RandRW",
          "type": "number",
          "format": "double",
          "x-go-name": "RandRW"
        },
        "rotation_speed": {
          "description": "True if this device is rotational.",
          "type": "string",
          "x-go-name": "RotationSpeed"
        },
        "seq_read": {
          "description": "SeqRead",
          "type": "number",
          "format": "double",
          "x-go-name": "SeqRead"
        },
        "seq_write": {
          "description": "SeqWrite",
          "type": "number",
          "format": "double",
          "x-go-name": "SeqWrite"
        },
        "size": {
          "description": "Total size in bytes.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Size"
        },
        "used": {
          "description": "Physical Bytes used.",
          "type": "integer",
          "format": "uint64",
          "x-go-name": "Used"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "Timestamp": {
      "description": "# Examples\n\nExample 1: Compute Timestamp from POSIX `time()`.\n\nTimestamp timestamp;\ntimestamp.set_seconds(time(NULL));\ntimestamp.set_nanos(0);\n\nExample 2: Compute Timestamp from POSIX `gettimeofday()`.\n\nstruct timeval tv;\ngettimeofday(\u0026tv, NULL);\n\nTimestamp timestamp;\ntimestamp.set_seconds(tv.tv_sec);\ntimestamp.set_nanos(tv.tv_usec * 1000);\n\nExample 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.\n\nFILETIME ft;\nGetSystemTimeAsFileTime(\u0026ft);\nUINT64 ticks = (((UINT64)ft.dwHighDateTime) \u003c\u003c 32) | ft.dwLowDateTime;\n\nA Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z\nis 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.\nTimestamp timestamp;\ntimestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));\ntimestamp.set_nanos((INT32) ((ticks % 10000000) * 100));\n\nExample 4: Compute Timestamp from Java `System.currentTimeMillis()`.\n\nlong millis = System.currentTimeMillis();\n\nTimestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)\n.setNanos((int) ((millis % 1000) * 1000000)).build();\n\n\nExample 5: Compute Timestamp from current time in Python.\n\ntimestamp = Timestamp()\ntimestamp.GetCurrentTime()\n\n# JSON Mapping\n\nIn JSON format, the Timestamp type is encoded as a string in the\n[RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the\nformat is \"{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z\"\nwhere {year} is always expressed using four digits while {month}, {day},\n{hour}, {min}, and {sec} are zero-padded to two digits each. The fractional\nseconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),\nare optional. The \"Z\" suffix indicates the timezone (\"UTC\"); the timezone\nis required, though only UTC (as indicated by \"Z\") is presently supported.\n\nFor example, \"2017-01-15T01:30:15.01Z\" encodes 15.01 seconds past\n01:30 UTC on January 15, 2017.\n\nIn JavaScript, one can convert a Date object to this format using the\nstandard [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString]\nmethod. In Python, a standard `datetime.datetime` object can be converted\nto this format using [`strftime`](https://docs.python.org/2/library/time.html#time.strftime)\nwith the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one\ncan use the Joda Time's [`ISODateTimeFormat.dateTime()`](\nhttp://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime--)\nto obtain a formatter capable of generating timestamps in this format.",
      "type": "object",
      "title": "A Timestamp represents a point in time independent of any time zone\nor calendar, represented as seconds and fractions of seconds at\nnanosecond resolution in UTC Epoch time. It is encoded using the\nProleptic Gregorian Calendar which extends the Gregorian calendar\nbackwards to year one. It is encoded assuming all minutes are 60\nseconds long, i.e. leap seconds are \"smeared\" so that no leap second\ntable is needed for interpretation. Range is from\n0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z.\nBy restricting to that range, we ensure that we can convert to\nand from  RFC 3339 date strings.\nSee [https://www.ietf.org/rfc/rfc3339.txt](https://www.ietf.org/rfc/rfc3339.txt).",
      "properties": {
        "nanos": {
          "description": "Non-negative fractions of a second at nanosecond resolution. Negative\nsecond values with fractions must still have non-negative nanos values\nthat count forward in time. Must be from 0 to 999,999,999\ninclusive.",
          "type": "integer",
          "format": "int32",
          "x-go-name": "Nanos"
        },
        "seconds": {
          "description": "Represents seconds of UTC time since Unix epoch\n1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n9999-12-31T23:59:59Z inclusive.",
          "type": "integer",
          "format": "int64",
          "x-go-name": "Seconds"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/vendor/github.com/golang/protobuf/ptypes/timestamp"
    },
    "TunnelConfig": {
      "description": "TunnelConfig describes key, cert and endpoint of a reverse proxy tunnel\nDEPRECATED",
      "type": "object",
      "properties": {
        "cert": {
          "type": "string",
          "x-go-name": "Cert"
        },
        "key": {
          "type": "string",
          "x-go-name": "Key"
        },
        "tunnel_endpoint": {
          "type": "string",
          "x-go-name": "Endpoint"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/api"
    },
    "VaultConfig": {
      "description": "VaultConfig is a vault configuration parameters struct",
      "type": "object",
      "properties": {
        "address": {
          "type": "string",
          "x-go-name": "Address"
        },
        "backend_path": {
          "type": "string",
          "x-go-name": "BackendPath"
        },
        "base_path": {
          "type": "string",
          "x-go-name": "BasePath"
        },
        "ca_cert": {
          "type": "string",
          "x-go-name": "CACert"
        },
        "ca_path": {
          "type": "string",
          "x-go-name": "CAPath"
        },
        "client_cert": {
          "type": "string",
          "x-go-name": "ClientCert"
        },
        "client_key": {
          "type": "string",
          "x-go-name": "ClientKey"
        },
        "skip_verify": {
          "type": "string",
          "x-go-name": "TLSSkipVerify"
        },
        "tls_server_name": {
          "type": "string",
          "x-go-name": "TLSServerName"
        },
        "token": {
          "type": "string",
          "x-go-name": "Token"
        }
      },
      "x-go-package": "github.com/libopenstorage/openstorage/osdconfig"
    }
  }
}